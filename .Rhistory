# Library
require(tidyverse)
soilsData<-
data.frame(RSMR=c("Xeric","Subxeric","Submesic","Mesic","Subhygric"))
soilsData<-
data.frame(RSMR=c("Xeric","Subxeric","Submesic","Mesic","Subhygric")) %>%
mutate(root=c(0.25,
0.5,
0.5,
0.5,
0.3))
View(soilsData)
# Site-specific parameters, as described above
soilsData<-
data.frame(RSMR=c("Xeric","Subxeric","Submesic","Mesic","Subhygric")) %>%
# Rooting depth
mutate(root=c(0.25,
0.5,
0.5,
0.5,
0.3)) %>%
# Coarse fragments
mutate(CF=c(0.55,
0.41,
0.4,
0.4,
0.2)) %>%
# Available water soil capacity
mutate(AWSC1=c(154.600000000000,
192.295698924732,
290.045454545455,
362.481132075471,
337.562499999999)) %>%
# Field capacity
mutate(FC=c(217.6,
247,
373,
453,
456))
# Site-specific parameters, as described above
soilsData<-
data.frame(RSMR=c("Xeric","Subxeric","Submesic","Mesic","Subhygric")) %>%
# Rooting depth
mutate(root=c(0.25,
0.5,
0.5,
0.5,
0.3)) %>%
# Coarse fragments
mutate(CF=c(0.55,
0.41,
0.4,
0.4,
0.2)) %>%
# Available water soil capacity
mutate(AWSC1=c(154.600000000000,
192.295698924732,
290.045454545455,
362.481132075471,
337.562499999999)) %>%
# Field capacity
mutate(FC=c(217.6,
247,
373,
453,
456)) %>%
# Available field capacity calculation
mutate(AFC=FC*root*(1-CF)) %>%
# Available water soil capacity calculation
mutate(AWSC=AWSC1*root*(1-CF)) %>%
# Percolation rate
mutate(infRate=c(7.5,
25.9,
24.9,
0,
-28.4))
View(soilsData)
save(soilData,file="soilsData.RData")
save(soilsData,file="soilsData.RData")
unnest(soilsData)
help(unnest)
help(extract)
3650-3604
3650-46
load("C:/Users/hgriesba/Documents/Projects/ClimateData/Adjust Homog Daily Data/dailyClimCompiled.Rdata")
clim_PG=daily.clim$pg
PrinceGeorge=daily.clim$pg
save(PrinceGeorge,file="PrinceGeorge.RData")
getwd()
climateData=PrinceGeorge
latitude=55
albedo=0.15
T.kelvin=273.15
Emissivity=0.96
SBconstant=0.0000000567
# Monthly daylength lookup table for three latitudes
daylength.table=data.frame(N50=c(8.3,9.8,11.6,13.5,15.2,16.1,15.7,14.3,12.4,10.5,8.8,7.9),
N55=c(7.5,9.4,11.5,13.8,15.9,17.1,16.6,14.7,12.4,10.2,8.1,6.9),
N60=c(6.4,8.8,11.4,14.2,16.8,18.4,17.7,15.4,12.5,9.7,7.1,5.6))
# Daylength calculation
daylength=daylength.table[,grep(paste("N",latitude,sep=""),names(daylength.table))]
root=soilsData$root
CF=soilsData$CF
AWSC1=soilsData$AWSC1
FC=soilsData$FC
AFC=soilsData$AFC
AWSC=soilsData$AWSC
infRate=soilsData$infRate
clim <-climateData %>%
# Average daily temperature
rowwise() %>%
mutate(tav=(tmn+tmx)/2) %>%
ungroup() %>%
# Snow (if TAV<=0, snow=PPT, otherwise snow=0)
mutate(snow=ifelse(tav<=0,ppt,0)) %>%  # Create snow column
# Other variables, see user guide for more  info
mutate(Esat=0.61078*exp(17.269*tmx/(237+tmx))) %>%
mutate(Edew=0.61078*exp(17.269*tmn/(237+tmn))) %>%
mutate(VDD=(Esat-Edew)*1) %>%
mutate(ET2=0) %>%
# Radiation is measured in watts/m2/day, and drives evapotranspiration modeling
mutate(Rn=((((1-albedo)*(0.7*((1-exp(-1*(0.036*exp(-0.154*abs(tmx-tmn)))*((abs(tmx-tmn)^2.4)))))*daylength[month])+(0.465*(VDD/(T.kelvin+tav)))+((Emissivity*(SBconstant*((T.kelvin+tav)^4)))))-(SBconstant*((T.kelvin-38)^4))))) %>%
mutate(Rn2=Rn/11.576) %>%
mutate(tav2=238.8/(595.5-(0.55*tav))) %>%
# Hargreaves potential evapotranspiration
mutate(HarPET=0.0135*(tav+17.78)*Rn2*tav2) %>%
# eliminate negative values in Hargreaves
mutate(HarPET=replace(HarPET,which(HarPET<0),0)) %>%
# Adjust to 0 for days with TMX<=0
mutate(PET=ifelse(tmx<=0,0,HarPET))
# Create snowbank dataframe
for (j in 1:nrow(clim)) {
# Starting snowbank is calculated as snowfall from November 15:December 31
# of last year in the climate dataset
snowStart=ifelse(j==1,sum(clim[(nrow(clim)-46):nrow(clim),"snow"]),clim$snowbank[j-1])
clim$snowbank[j]=ifelse(ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10))<0,0,ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10)))
}
View(clim)
warnings()
clim<-
clim %>%
mutate(pPET=ifelse(snow>0,snow-PET,ppt+snowbank-PET))
# First pPET value is calculated differently
clim$pPET[1]=ifelse(clim$ppt[1]==0,clim$snowbank[1]-clim$PET[1],clim$ppt[1]-clim$PET[1])
DST=matrix(data=0,ncol=5,nrow=nrow(clim)); DST[1,]=clim$pPET[1]
AET=matrix(data=0,ncol=5,nrow=nrow(clim)); AET[1,]=ifelse(clim$snowbank[1]>0,clim$PET[1],ifelse(clim$ppt[1]>clim$PET[1],clim$PET[1],clim$ppt[1]+abs(DST[1,])))
RunS=matrix(data=0,ncol=5,nrow=nrow(clim)) # first row is zero
ST=matrix(data=0,ncol=5,nrow=nrow(clim)); ST[1,]=AFC
for (j in 2:nrow(clim)) {
for (k in 1:5) {
DST[j,k]=ifelse(clim$pPET[j]>0,clim$pPET[j],ifelse(ST[j-1,k]<=0,0,ifelse(ST[j-1,k]<abs(clim$pPET[j]),ST[j-1,k]*(-1),clim$pPET[j])))
AET[j,k]=ifelse(clim$snowbank[j]>0,clim$PET[j],ifelse(clim$ppt[j]>clim$PET[j],clim$PET[j],clim$ppt[j]+abs(DST[j,k])))
}
#RunS
RunS[j,1]=ifelse(ST[j-1,1]>AWSC[1],infRate[1],0)
RunS[j,2]=ifelse(ST[j-1,2]>AWSC[2],infRate[2],0)
RunS[j,3]=ifelse(infRate[3]<0,ifelse(RunS[j,1]+RunS[j,2]>0,infRate[3],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[3],infRate[3],clim$ppt[j-1]))),ifelse(ST[j-1,3]>AWSC[3],infRate[3],0))
RunS[j,4]=ifelse(ST[j-1,4]>AWSC[4],infRate[4],0)
RunS[j,5]=ifelse(infRate[5]<0,ifelse(sum(RunS[j,1:4])>0,infRate[5],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[5],infRate[5],clim$ppt[j-1]))),ifelse(ST[j-1,5]>AWSC[5],infRate[5],0))
for (k in 1:5) {
ST[j,k]=ifelse(ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k])))>AFC[k],AFC[k],ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))))-RunS[j,k]
}
}
ASMR=matrix(data=1,nrow=nrow(clim),ncol=5)
for (j in 1:nrow(clim)) {
for (k in 1:5) {
ASMR[j,k]=ifelse(clim$PET[j]<=0,1,AET[j,k]/clim$PET[j])
}
}
colnames(ASMR)=paste("S",1:5,".ASMR",sep="")
clim=data.frame(clim,ASMR)
asmrCalc=function(climateData,latitude=55,soilsData) {
# LIBRARIES
require(tidyverse)
# Data checking
# Placeholder: check climate data, latitude, and soilsData
# CONSTANTS
# TACA uses the following constants:
albedo=0.15
T.kelvin=273.15
Emissivity=0.96
SBconstant=0.0000000567
# DAYLENGTH
# Monthly daylength lookup table for three latitudes
daylength.table=data.frame(N50=c(8.3,9.8,11.6,13.5,15.2,16.1,15.7,14.3,12.4,10.5,8.8,7.9),
N55=c(7.5,9.4,11.5,13.8,15.9,17.1,16.6,14.7,12.4,10.2,8.1,6.9),
N60=c(6.4,8.8,11.4,14.2,16.8,18.4,17.7,15.4,12.5,9.7,7.1,5.6))
# Daylength calculation
daylength=daylength.table[,grep(paste("N",latitude,sep=""),names(daylength.table))]
# EXTRACT SOILS INFORMATION
root=soilsData$root
CF=soilsData$CF
AWSC1=soilsData$AWSC1
FC=soilsData$FC
AFC=soilsData$AFC
AWSC=soilsData$AWSC
infRate=soilsData$infRate
# ADDITIONAL CLIMATE VARIABLES
clim <-climateData %>%
# Average daily temperature
rowwise() %>%
mutate(tav=(tmn+tmx)/2) %>%
ungroup() %>%
# Snow (if TAV<=0, snow=PPT, otherwise snow=0)
mutate(snow=ifelse(tav<=0,ppt,0)) %>%  # Create snow column
# Other variables, see user guide for more  info
mutate(Esat=0.61078*exp(17.269*tmx/(237+tmx))) %>%
mutate(Edew=0.61078*exp(17.269*tmn/(237+tmn))) %>%
mutate(VDD=(Esat-Edew)*1) %>%
mutate(ET2=0) %>%
# Radiation is measured in watts/m2/day, and drives evapotranspiration modeling
mutate(Rn=((((1-albedo)*(0.7*((1-exp(-1*(0.036*exp(-0.154*abs(tmx-tmn)))*((abs(tmx-tmn)^2.4)))))*daylength[month])+(0.465*(VDD/(T.kelvin+tav)))+((Emissivity*(SBconstant*((T.kelvin+tav)^4)))))-(SBconstant*((T.kelvin-38)^4))))) %>%
mutate(Rn2=Rn/11.576) %>%
mutate(tav2=238.8/(595.5-(0.55*tav))) %>%
# Hargreaves potential evapotranspiration
mutate(HarPET=0.0135*(tav+17.78)*Rn2*tav2) %>%
# eliminate negative values in Hargreaves
mutate(HarPET=replace(HarPET,which(HarPET<0),0)) %>%
# Adjust to 0 for days with TMX<=0
mutate(PET=ifelse(tmx<=0,0,HarPET))
# SNOWBANK
# Create snowbank dataframe
for (j in 1:nrow(clim)) {
# Starting snowbank is calculated as snowfall from November 15:December 31
# of last year in the climate dataset
snowStart=ifelse(j==1,sum(clim[(nrow(clim)-46):nrow(clim),"snow"]),clim$snowbank[j-1])
clim$snowbank[j]=ifelse(ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10))<0,0,ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10)))
}
# DAILY WATER BALANCE
clim<-
clim %>%
mutate(pPET=ifelse(snow>0,snow-PET,ppt+snowbank-PET))
# First pPET value is calculated differently
clim$pPET[1]=ifelse(clim$ppt[1]==0,clim$snowbank[1]-clim$PET[1],clim$ppt[1]-clim$PET[1])
# DAILY ASMR CALCULATIONS
# Initialize climate run
DST=matrix(data=0,ncol=5,nrow=nrow(clim)); DST[1,]=clim$pPET[1]
AET=matrix(data=0,ncol=5,nrow=nrow(clim)); AET[1,]=ifelse(clim$snowbank[1]>0,clim$PET[1],ifelse(clim$ppt[1]>clim$PET[1],clim$PET[1],clim$ppt[1]+abs(DST[1,])))
RunS=matrix(data=0,ncol=5,nrow=nrow(clim)) # first row is zero
ST=matrix(data=0,ncol=5,nrow=nrow(clim)); ST[1,]=AFC
for (j in 2:nrow(clim)) {
for (k in 1:5) {
DST[j,k]=ifelse(clim$pPET[j]>0,clim$pPET[j],ifelse(ST[j-1,k]<=0,0,ifelse(ST[j-1,k]<abs(clim$pPET[j]),ST[j-1,k]*(-1),clim$pPET[j])))
AET[j,k]=ifelse(clim$snowbank[j]>0,clim$PET[j],ifelse(clim$ppt[j]>clim$PET[j],clim$PET[j],clim$ppt[j]+abs(DST[j,k])))
}
#RunS
RunS[j,1]=ifelse(ST[j-1,1]>AWSC[1],infRate[1],0)
RunS[j,2]=ifelse(ST[j-1,2]>AWSC[2],infRate[2],0)
RunS[j,3]=ifelse(infRate[3]<0,ifelse(RunS[j,1]+RunS[j,2]>0,infRate[3],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[3],infRate[3],clim$ppt[j-1]))),ifelse(ST[j-1,3]>AWSC[3],infRate[3],0))
RunS[j,4]=ifelse(ST[j-1,4]>AWSC[4],infRate[4],0)
RunS[j,5]=ifelse(infRate[5]<0,ifelse(sum(RunS[j,1:4])>0,infRate[5],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[5],infRate[5],clim$ppt[j-1]))),ifelse(ST[j-1,5]>AWSC[5],infRate[5],0))
for (k in 1:5) {
ST[j,k]=ifelse(ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k])))>AFC[k],AFC[k],ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))))-RunS[j,k]
}
}
ASMR=matrix(data=1,nrow=nrow(clim),ncol=5)
for (j in 1:nrow(clim)) {
for (k in 1:5) {
ASMR[j,k]=ifelse(clim$PET[j]<=0,1,AET[j,k]/clim$PET[j])
}
}
colnames(ASMR)=paste("S",1:5,".ASMR",sep="")
# Assign output to final data frame
final<-data.frame(clim,ASMR) %>%
select(date,year,month,day,everything()) # Reorder
return(final)
}
X=asmrCalc(PrinceGeorge,latitude=55,soilsData)
asmrCalc=function(climateData,latitude=55,soilsData) {
# LIBRARIES
require(tidyverse)
# Data checking
# Placeholder: check climate data, latitude, and soilsData
# CONSTANTS
# TACA uses the following constants:
albedo=0.15
T.kelvin=273.15
Emissivity=0.96
SBconstant=0.0000000567
# DAYLENGTH
# Monthly daylength lookup table for three latitudes
daylength.table=data.frame(N50=c(8.3,9.8,11.6,13.5,15.2,16.1,15.7,14.3,12.4,10.5,8.8,7.9),
N55=c(7.5,9.4,11.5,13.8,15.9,17.1,16.6,14.7,12.4,10.2,8.1,6.9),
N60=c(6.4,8.8,11.4,14.2,16.8,18.4,17.7,15.4,12.5,9.7,7.1,5.6))
# Daylength calculation
daylength=daylength.table[,grep(paste("N",latitude,sep=""),names(daylength.table))]
# EXTRACT SOILS INFORMATION
root=soilsData$root
CF=soilsData$CF
AWSC1=soilsData$AWSC1
FC=soilsData$FC
AFC=soilsData$AFC
AWSC=soilsData$AWSC
infRate=soilsData$infRate
# ADDITIONAL CLIMATE VARIABLES
clim <-climateData %>%
# Average daily temperature
rowwise() %>%
mutate(tav=(tmn+tmx)/2) %>%
ungroup() %>%
# Snow (if TAV<=0, snow=PPT, otherwise snow=0)
mutate(snow=ifelse(tav<=0,ppt,0)) %>%  # Create snow column
# Other variables, see user guide for more  info
mutate(Esat=0.61078*exp(17.269*tmx/(237+tmx))) %>%
mutate(Edew=0.61078*exp(17.269*tmn/(237+tmn))) %>%
mutate(VDD=(Esat-Edew)*1) %>%
mutate(ET2=0) %>%
# Radiation is measured in watts/m2/day, and drives evapotranspiration modeling
mutate(Rn=((((1-albedo)*(0.7*((1-exp(-1*(0.036*exp(-0.154*abs(tmx-tmn)))*((abs(tmx-tmn)^2.4)))))*daylength[month])+(0.465*(VDD/(T.kelvin+tav)))+((Emissivity*(SBconstant*((T.kelvin+tav)^4)))))-(SBconstant*((T.kelvin-38)^4))))) %>%
mutate(Rn2=Rn/11.576) %>%
mutate(tav2=238.8/(595.5-(0.55*tav))) %>%
# Hargreaves potential evapotranspiration
mutate(HarPET=0.0135*(tav+17.78)*Rn2*tav2) %>%
# eliminate negative values in Hargreaves
mutate(HarPET=replace(HarPET,which(HarPET<0),0)) %>%
# Adjust to 0 for days with TMX<=0
mutate(PET=ifelse(tmx<=0,0,HarPET))
# SNOWBANK
# Create snowbank dataframe
for (j in 1:nrow(clim)) {
if (j==1) clim$snowbank=NA
# Starting snowbank is calculated as snowfall from November 15:December 31
# of last year in the climate dataset
snowStart=ifelse(j==1,sum(clim[(nrow(clim)-46):nrow(clim),"snow"]),clim$snowbank[j-1])
clim$snowbank[j]=ifelse(ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10))<0,0,ifelse(clim$snow[j]+snowStart-clim$PET[j]<0,0,clim$snow[j]+snowStart-clim$PET[j])-(ifelse(clim$tav[j]<0,0,((0.026*clim$Rn[j])+(0.2*clim$tav[j]))/10)))
}
# DAILY WATER BALANCE
clim<-
clim %>%
mutate(pPET=ifelse(snow>0,snow-PET,ppt+snowbank-PET))
# First pPET value is calculated differently
clim$pPET[1]=ifelse(clim$ppt[1]==0,clim$snowbank[1]-clim$PET[1],clim$ppt[1]-clim$PET[1])
# DAILY ASMR CALCULATIONS
# Initialize climate run
DST=matrix(data=0,ncol=5,nrow=nrow(clim)); DST[1,]=clim$pPET[1]
AET=matrix(data=0,ncol=5,nrow=nrow(clim)); AET[1,]=ifelse(clim$snowbank[1]>0,clim$PET[1],ifelse(clim$ppt[1]>clim$PET[1],clim$PET[1],clim$ppt[1]+abs(DST[1,])))
RunS=matrix(data=0,ncol=5,nrow=nrow(clim)) # first row is zero
ST=matrix(data=0,ncol=5,nrow=nrow(clim)); ST[1,]=AFC
for (j in 2:nrow(clim)) {
for (k in 1:5) {
DST[j,k]=ifelse(clim$pPET[j]>0,clim$pPET[j],ifelse(ST[j-1,k]<=0,0,ifelse(ST[j-1,k]<abs(clim$pPET[j]),ST[j-1,k]*(-1),clim$pPET[j])))
AET[j,k]=ifelse(clim$snowbank[j]>0,clim$PET[j],ifelse(clim$ppt[j]>clim$PET[j],clim$PET[j],clim$ppt[j]+abs(DST[j,k])))
}
#RunS
RunS[j,1]=ifelse(ST[j-1,1]>AWSC[1],infRate[1],0)
RunS[j,2]=ifelse(ST[j-1,2]>AWSC[2],infRate[2],0)
RunS[j,3]=ifelse(infRate[3]<0,ifelse(RunS[j,1]+RunS[j,2]>0,infRate[3],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[3],infRate[3],clim$ppt[j-1]))),ifelse(ST[j-1,3]>AWSC[3],infRate[3],0))
RunS[j,4]=ifelse(ST[j-1,4]>AWSC[4],infRate[4],0)
RunS[j,5]=ifelse(infRate[5]<0,ifelse(sum(RunS[j,1:4])>0,infRate[5],ifelse(clim$ppt[j-1]==0,0,ifelse(clim$ppt[j-1]>infRate[5],infRate[5],clim$ppt[j-1]))),ifelse(ST[j-1,5]>AWSC[5],infRate[5],0))
for (k in 1:5) {
ST[j,k]=ifelse(ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k])))>AFC[k],AFC[k],ifelse((ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))<0,0,(ifelse(ST[j-1,k]<0,0,ST[j-1,k]+DST[j,k]))))-RunS[j,k]
}
}
ASMR=matrix(data=1,nrow=nrow(clim),ncol=5)
for (j in 1:nrow(clim)) {
for (k in 1:5) {
ASMR[j,k]=ifelse(clim$PET[j]<=0,1,AET[j,k]/clim$PET[j])
}
}
colnames(ASMR)=paste("S",1:5,".ASMR",sep="")
# Assign output to final data frame
final<-data.frame(clim,ASMR) %>%
select(date,year,month,day,everything()) # Reorder
return(final)
}
X=asmrCalc(PrinceGeorge)
X=asmrCalc(PrinceGeorge,latitude=55,soilsData)
View(X)
library(roxygen2)
help(package="roxygen2")
vignette("roxygen2", package = "roxygen2")
roxygenize
roxygenize()
help(roxygenize)
devtools::use_package()
help(use_package)
use_package("tidyverse")
usethis::use_package("tidyverse")
usethis::use_package("dplyr")
usethis::use_package("ggplot2","suggests")
usethis::use_package("tidyr")
devtools::document()
R CMD build --resave-data
save(PrinceGeorge,file="PrinceGeorge.RData",compress=xz)
install()
devtools::install()
devtools::install()
devtools::install()
Sys.getenv("R_LIBS_USER")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
BC_clim_stn_metadata <- read_csv("data/BC_clim_stn_metadata.csv")
View(BC_clim_stn_metadata)
save(BC_clim_stn_metadata,file="BC_clim_stn_metadata.RData")
getwd()
load("C:/Users/hgriesba/Documents/Git/forestDroughtTool/data/BC_clim_stn_metadata.RData")
load(here("data","BC_clim_stn_metadata.RData"))
load(here::here("data","BC_clim_stn_metadata.RData"))
library(bcmaps)
library(sf)
install.packages("bcmaps")
library(sf)
library(bcmaps)
install.packages('bcmapsdata', repos='https://bcgov.github.io/drat/')
View(BC_clim_stn_metadata)
# Convert BC climate station metadata to geospatial data
stn<-st_as_sf(BC_clim_stn_metadata,coords=c("lon","lat"))
summary(stn)
# Set Coordinate Reference System to WGS1984
stn <- st_set_crs(stn, 4326)
# Convert BC climate station metadata to geospatial data
stn<-st_as_sf(BC_clim_stn_metadata,coords=c("lon","lat"))
stn<-transform_bc_albers(stn)
# Set Coordinate Reference System to WGS1984
stn <- st_set_crs(stn, 4326)
stn<-transform_bc_albers(stn)
bec()
bec()
# import BGC units
bgc<-bec()
help(bec
)
help(bgc)
head(bgc)
bgc$BGC_LABEL
bgc$MAP_LABEL
# Join with climate station data
st_join(stn,bgc[,"MAP_LABEL"])
# Join with climate station data
stn<-st_join(stn,bgc[,"MAP_LABEL"])
library(tidyverse)
help(summarise)
stn %>%
group_by(MAP_LABEL) %>%
summarise(Num=length())
stn %>%
group_by(MAP_LABEL) %>%
summarise(Num=n())
help("st_drop_geometry")
stn %>%
st_drop_geometry() %>%
group_by(MAP_LABEL) %>%
summarise(Num=n())
library(ggplot2)
stn %>%
st_drop_geometry() %>%
group_by(MAP_LABEL) %>%
summarise(Num=n()) %>%
ggplot(aes(x=MAP_LABEL, y=Num)) +
geom_bar(stat="identity")
stn %>%
st_drop_geometry() %>%
group_by(MAP_LABEL) %>%
summarise(Num=n()) %>%
write.csv(file="Climate stations by BGC unit.csv")
# Analyze climate data coverage for each BGC unit
stn %>%
st_drop_geometry() %>%
group_by(MAP_LABEL) %>%
summarise(Num.Stn=n()) %>%
write.csv(file="Climate stations by BGC unit.csv")
unique(stn$MAP_LABEL)
stn$MAP_LABEL%in%"ESSFmvp"
stn$MAP_LABEL%in%"ESSFmvp0"
which(stn$MAP_LABEL%in%"ESSFmvp0"==TRUE)
which(stn$MAP_LABEL%in%"ESSFmvp"==TRUE)
stn%MAP_LABEL[which(stn$MAP_LABEL%in%"ESSFmvp"==TRUE)]
stn$MAP_LABEL[which(stn$MAP_LABEL%in%"ESSFmvp"==TRUE)]
bgcList<-c("BWBSdk1","SBSmk1","SBSmk2","SBSwk2","ESSFmv3","ESSFmvp")
stnList<-stn[which(stn$MAP_LABEL%in%bgcList)==TRUE,]
which(stn$MAP_LABEL%in%bgcList)==TRUE
stnList<-stn[which(stn$MAP_LABEL%in%bgcList==TRUE),]
stnList
View(stnList)
unique(stnList$network_name)
stnList %>%
select(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH")
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH")
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH") %>%
write.csv(file="Mackenzie_drought_Climate stations by BGC unit.csv")
# Shortlist stn list for BGC units of interest
bgcList<-c("BWBSdk","SBSmk1","SBSmk2","SBSwk2","ESSFmv3","ESSFmvp")
stnList<-stn[which(stn$MAP_LABEL%in%bgcList==TRUE),]
# Shortlist only for EnvCan, BC Hydro, or Env-ASP stations
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH") %>%
write.csv(file="Mackenzie_drought_Climate stations by BGC unit.csv")
# Shortlist stn list for BGC units of interest
bgcList<-c("BWBSdk","SBSmk1","SBSmk2","SBSwk2","ESSFmv","ESSFmvp")
stnList<-stn[which(stn$MAP_LABEL%in%bgcList==TRUE),]
# Shortlist only for EnvCan, BC Hydro, or Env-ASP stations
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH") %>%
write.csv(file="Mackenzie_drought_Climate stations by BGC unit.csv")
# Shortlist stn list for BGC units of interest
bgcList<-c("BWBSdk","SBSmk1","SBSmk2","SBSwk2","ESSFmv2","ESSFmvp")
stnList<-stn[which(stn$MAP_LABEL%in%bgcList==TRUE),]
# Shortlist only for EnvCan, BC Hydro, or Env-ASP stations
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH") %>%
write.csv(file="Mackenzie_drought_Climate stations by BGC unit.csv")
# Shortlist stn list for BGC units of interest
bgcList<-c("BWBSdk","SBSmk1","SBSmk2","SBSwk2","ESSFmv2","ESSFmvp")
stnList<-stn[which(stn$MAP_LABEL%in%bgcList==TRUE),]
# Shortlist only for EnvCan, BC Hydro, or Env-ASP stations
stnList %>%
dplyr::filter(network_name=="EC" | network_name=="EC_raw" | network_name=="BCH") %>%
write.csv(file="Mackenzie_drought_Climate stations by BGC unit.csv")
